{"data":{"allMdx":{"edges":[{"node":{"id":"89451349-9cbb-5d13-b344-030af873efa4","body":"","frontmatter":{"created_at":null,"description":null,"title":null,"thumbnail":null},"fields":{"slug":"/posts/2023/09/react-native-unable-to-boot-device/"}}},{"node":{"id":"5e287528-14fd-5421-bdf6-34f764aabc9c","body":"\n{/* import apple from \"../../../images/2023/10/apples-1.webp\"; */}\n\n유난히 더웠던 올해 여름이 지나가고 있네요. 여름이 지나면 선선하고 실한 과일도 많이 먹을 수 있는 계절인 가을이 찾아오는데요.\n\n요새는 비닐하우스가 많아서 다양한 과일을 계절에 상관없이 먹을 수 있지만 그래도 제철 과일은 퀄리티가 다르잖아요~! \n\n그래서 준비했습니다. 제철 과일 가을편!\n\n---\n\n## 가을 제철 과일 종류와 효능은?\n\n이제 제철 과일들을 소개하면서 여러 가지 효능들을 소개할 거에요!\n\n아무리 좋은 효능이라도 너무 과하면 독이 되는 거 모두 아시죠?? 제철 과일이 아무리 맛있고 효능이 좋아도 우리 모두 정량 섭취를 통해서 더 건강한 사람들로 거듭나요!\n\n## 1. [제철 과일] 사과\n\n![apples-1](../../../images/2023/10/apples-1.webp)\n\n{/* <img  src={apple} style={{width: \"100%\"}} />\n\n{`http://localhost:8000${apple}`}\n\n<MdxImage src={`http://localhost:8000${apple}`} />\n<StaticImage src={`http://localhost:8000${apple}`} alt=\"hello\" />\n<GatsbyImage image={`http://localhost:8000${apple}`} alt=\"hello\" /> */}\n\n첫 번째 제철 과일은 가장 익숙한 사과인데요! 사과는 예로부터 여러 장점을 가진 슈퍼 푸드로 알려져왔습니다. 그럼 어떤 장점들이 있는지 한 번 볼까요??\n\n1. 칼로리가 낮고 섬유질이 많아 체중 감량에 좋은 간식이에요.\n2. 산화 방지제가 풍부해서 손상으로부터 여러분의 세포를 보호해줘요.\n3. 면역력을 높이는 데 도움을 줄 수 있는 비타민 C의 좋은 공급원이에요.\n4. 콜레스테롤 수치를 낮춰주는 수용성 섬유질을 함유하고 있어요.\n5. 폴리페놀이 풍부해서 체내의 염증을 줄여줘요.\n6. 뇌 기능을 향상시키고 알츠하이머 병의 위험을 줄여줘요.\n7. 특정한 종류의 암의 위험을 줄여줘요.\n8. 폐 기능을 향상시키고 천식의 위험을 줄여줘요.\n9. 뼈 건강을 증진시키고 골다공증의 위험을 줄여줘요.\n10. 장에서 좋은 박테리아의 성장을 촉진함으로써 장 건강을 향상시켜요.\n\n## 2. [제철 과일] 배\n\n![](../../../images/2023/10/pears-1.webp)\n\n두 번째 제철 과일은 배에요. 사과와 마찬가지로 우리에게 엄청 친숙한 과일이죠. 그런데 그런 배에 이런 효능들이 있다는 사실 알고 계셨나요??\n\n1. 수분과 섬유질이 풍부해서 갈증 해소에 따봉이에요.\n2. 소화에 좋아 장을 건강하게 해주고 변비를 예방해줘요.\n3. 알코올을 분해하는 효능이 있어 숙취 제거에 따봉이에요.\n4. 감기 예방과 가래 제거 효능이 있어 일교차가 심한 가을에 따봉이에요.\n5. 콜레스테롤 수치를 낮춰주는 효능이 있어 혈관을 깨끗하게 해줘요.\n6. 동맹경화 등의 심혈관 건강에 따봉이에요.\n7. 인체 열을 내려주는 효과가 있어 감기나 두통에 따봉이에요.\n8. 당분 함량은 높지만 자혈당 부하지수가 낮아서 혈당 안정에 따봉이에요.\n9. 칼륨 함량이 높아 고혈압 예방에 따봉이에요.\n10. 체내 노폐물과 독소 배출 효과가 있어 이뇨작요에 따봉이에요.\n\n## 3. [제철 과일] 감\n\n![](../../../images/2023/10/persimmons-1.webp)\n\n세 번째 제철 과일은 감이에요. 추석에는 사과, 배와 같이 차례상에 올라가기도 하고 친숙한 과일이죠. 감은 가을에 수확되고 그냥 깎아먹어도 맛있고, 곶감으로 먹어도 참 맛있는 것 같아요. 그런 감도 이런 효능이 있답니다!\n\n1. 함류된 비타민C가 무려 사과의 10배에 달해서 피부 영양 공급, 활성산소 제거에 따봉이에요.\n2. 스코플레틴 성분이 다량 함유돼 고혈압이나 동맥경화 등 심혈관질환 예방에 따봉이에요.\n3. 비타민A가 풍부해 안구 건조증, 백내장 예방 등 눈 건강에도 따봉이에요.\n4. 떫은 맛을 내는 '탄닌' 성분이 혈액 응고를 도와 지혈과 살균작용에 따봉이에요.\n5. 아세트알데하이드의 분해를 촉진시켜 숙취 해소에 따봉이에요.\n6. 체내의 신진대사를 촉진해 환절기 면역력 강화에 따봉이에요.\n\n## 4. [제철 과일] 석류\n\n![](../../../images/2023/10/pomegranates-1.webp)\n\n네 번째 제철 과일은 석류에요. 개인적으로는 석류는 먹기가 너무 불편하고 씨가 많이 나와서 선호하지 않는 편이에요. 그래도 맛은 정말 좋아서 주변 사람들은 모두 좋아하는 과일이 아닌가 싶어요. 그런 석류는 과연 어떤 장점들이 있을까요?\n\n1. 항암 효과가 있어요. 특히, 남성 전립선암에 따봉이에요.\n2. 집중력과 활력을 높여주고 불안과 만성피로에 따봉이에요.\n3. 뇌 손상과 같은 신경장애 완화에 따봉이에요.\n4. 칼륨이 풍부해서 이뇨 작용을 도와 독소 배출과 다이어트에 따봉이에요!\n5. 폴리페놀이라는 항산화 물질이 풍부하게 함유해서 면역 강화에 따봉이에요!\n6. 간의 독소 제거 및 혈류 개선에 따봉이에요!\n7. 콜레스테롤 수치 저하와 고혈압 예방에 따봉이에요!\n\n## 5. [제철 과일] 무화과\n\n![](../../../images/2023/10/fig-1.webp)\n\n다섯 번째 제철 과일은 무화과에요. 무화과는 자른 상태로 바로 먹어본 적은 거의 없는 것 같고, 디저트에 들어갔을 때 몇 번 먹어봤는데 달달하고 맛있더라고요! 이 포스팅 쓰면서 저도 구매해보려고요. 그런 무화과도 이렇게나 많은 효능이 있어요.\n\n1. 칼로리가 다소 있는 편이어서 공복감 해결에 따봉이에요.\n2. 섬유질이 풍부해 변비 완화와 소화기 계통 건강에 따봉이에요.\n3. 혈중 중성지방을 낮춰서 심혈관계 질환 예방에 따봉이에요.\n4. 펙틴이라는 수용성 섬유질과 세로토닌을 생성하는 비타민B6를 함유해 콜레스테롤을 낮춰줘요.\n5. 철분 함량이 많아 빈혈에 따봉이에요.\n6. 비타민K, 칼슘, 칼륨, 마그네슘 등을 많이 함유해 골다공증에 따봉이에요.\n7. 아연, 마그네슘, 칼슘, 칼륨 등이 풍부해 산화질소 생성 증가 및 불임, 발기부전 등의 성기능 장애에 따봉이에요.\n8. 오메가3와 마그네슘, 멜라토닌 생성에 도움을 주는 트립토판이 들어있어 불면증 방지에 따봉이에요.\n\n## 6. [제철 과일] 모과\n\n![](../../../images/2023/10/quinces-1.webp)\n\n마지막 제철 과일은 모과에요. 모과는 항상 방향제 대신으로만 사용해왔는데 실제로 먹는 분들은 향이 좋은 만큼 차로 우려서 많이 드시더라고요. 얼마나 효능이 좋은지 한 번 볼까요??\n\n1. 비타민, 구연산, 사과산, 플라보노이드 등이 풍부해 감기 예방과 만성 기침에 따봉이에요.\n2. 몸살이나 근육통, 단백성 관절염 부종억제, 연골 조직을 부드럽게 하는 데 따봉이에요.\n3. 비타민, 사포닌, 탄닌 등이 풍부해 호흡기 질환 예방과 목 염증 완화에 따봉이에요.\n4. 임신 초기 입덧의 원인인 위장 장애 증상 완화에 따봉이에요.\n\n---\n\n## 정리하며\n\n오늘은 가을의 제철 과일 종류와 각각의 효능에 대해 알아봤어요. 이렇게만 적어도 글이 너무 길어져서 보관 방법 등에 대해서는 적지 못했는데 다음에 기회가 된다면 각 과일들의 보관 방법들에 대해서도 적어보도록 할게요.\n\n###### 이 포스팅은 쿠팡 파트너스 활동의 일환으로, 이에 따른 일정액의 수수료를 제공받습니다.","frontmatter":{"created_at":"23.10.31","description":"유난히 더웠던 올해 여름이 지나가고 있네요. 여름이 지나면 선선하고 실한 과일도 많이 먹을 수 있는 계절인 가을이 찾아오는데요. 요새는 비닐하우스가 많아서 다양한 과일을 계절에 상관없이 먹을 수 있지만 그래도 제철 과일은 퀄리티가 다르잖아요~! 그래서 준비했습니다. 제철 과일 가을편!","title":"제철 과일, 가을편!","thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8e8","images":{"fallback":{"src":"/static/4609fbc9d57a18663077de26f23065e8/e9a79/fall-fruit.png","srcSet":"/static/4609fbc9d57a18663077de26f23065e8/f31ef/fall-fruit.png 40w,\n/static/4609fbc9d57a18663077de26f23065e8/1f8a1/fall-fruit.png 80w,\n/static/4609fbc9d57a18663077de26f23065e8/e9a79/fall-fruit.png 160w,\n/static/4609fbc9d57a18663077de26f23065e8/5f035/fall-fruit.png 320w","sizes":"(min-width: 160px) 160px, 100vw"},"sources":[{"srcSet":"/static/4609fbc9d57a18663077de26f23065e8/e73fe/fall-fruit.webp 40w,\n/static/4609fbc9d57a18663077de26f23065e8/61ca6/fall-fruit.webp 80w,\n/static/4609fbc9d57a18663077de26f23065e8/60b4d/fall-fruit.webp 160w,\n/static/4609fbc9d57a18663077de26f23065e8/5e011/fall-fruit.webp 320w","type":"image/webp","sizes":"(min-width: 160px) 160px, 100vw"}]},"width":160,"height":160}}}},"fields":{"slug":"/posts/2023/10/autumnal-fruits/"}}},{"node":{"id":"a07b0e76-dd76-53ae-9811-15339aaf718c","body":"\nimport img1 from '../../../images/2023/09/navigation-1-0.webp';\nimport img2 from '../../../images/2023/09/navigation-1-1.webp';\n\n오늘은 react-navigation 오픈 소스를 사용하여 react-native에서의 화면 전환에 대해 알아보도록 해요.\n\n우선 [공식문서](https://reactnavigation.org/docs/getting-started/)를 켜놓으시면 더 편하게 따라오실 수 있어요. 블로그 글도 간단하게 한글로 정리되서 좋지만 항상 공식문서를 읽는 습관을 들이는게 좋아요.\n\n## 1. 프로젝트 만들기\n\n우선 프로젝트를 한 번 만들어보도록 하죠. \n\nmac이면 터미널 window면 cmd를 켜서 react-native 프로젝트를 만들어주세요.\n\n저는 navigation이라는 이름의 react-native 프로젝트를 한 번 만들어볼게요. \n\n```bash\n# npx react-native init {프로젝트명}\nnpx react-native init navigation\n```\n\n ## 2. react-navigation 설치\n\n 공식문서에서 말하는대로 dependencies와 함께 react-navigation을 설치해볼게요.\n\n ```bash\n # cd {생성한 프로젝트명}\n cd navigation\n\n # react-navigation/native와 react-navigation/stack \n # react-navigation/native의 dependencies인 react-native-screens, react-native-safe-area-context\n # react-navigation/stack의 dependency인 react-native-gesture-handler 를 함께 설치\n yarn add @react-navigation/native @react-navigation/stack react-native-screens react-native-safe-area-context react-native-gesture-handler\n ```\n\n ### 2-1. ios 추가 작업\n\n ios는 방금 설치한 모듈들을 연결하기 위해 pod install을 진행해줘야 해요.\n\n ```bash\n cd ios\n pod install\n cd ..\n ```\n\n### 2-2. android 추가 작업\n\nandroid의 경우 \\\"{\"android/app/src/main/java/<프로젝트명>/MainActivity.java\"}\\\" 에서 아래의 코드를 추가해야해요.\n\n아래 코드를 추가하지 않으면 앱을 백그라운드에서 포그라운드로 전환할 때 비정상 종료가 발생하는 경우가 생겨요.\n\n```java\n// android/app/src/main/java/<프로젝트명>/MainActivity.java\n\npublic class MainActivity extends ReactActivity {\n  // ...\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(null);\n  }\n  // ...\n}\n```\n\n### 2-3. ios, android 공통 작업\n\n@react-navigation/stack의 dependency인 react-native-gesture-handler를 index.js에서 import해줘요.\n\n그렇지 않으면 빌드 중 오류가 발생하거나 화면 전환에 문제가 생길 수 있어요.\n\n```js \n// index.js\n\n// ...\n- import 'react-native-gesture-handler';\n// ...\n```\n\n## 3. 테스트 화면 작성\n\n테스트 화면은 아래와 같이 구성할 예정이에요.\n\n기존에 루트 디렉토리에 있던 App.tsx를 src/screens 폴더를 만든 후에 옮겨주세요. \n\n마찬 가지로 src/screens 폴더 안에 Navigator.tsx, Screen1.tsx와 Screen2.tsx 파일을 만들어주세요.\n\n그리고 Navigation의 type을 선언하기 위한 Navigation.ts 파일을 types 폴더를 만든 후에 만들어주세요.\n\n```\n📦src\n ┣ 📂screens\n ┃ ┣ 📜App.tsx\n ┃ ┣ 📜Navigator.tsx\n ┃ ┣ 📜Screen1.tsx\n ┃ ┗ 📜Screen2.tsx\n ┗ 📂types\n ┃ ┗ 📜Navigation.ts\n```\n\n### 3-1. Navigation.ts 타입 코드 작성\n\n다른 코드들을 작성하기에 앞서 Naivgation에 어떤 스크린들이 존재하는지 타입을 지정해요.\n\n우리는 Screen1과 Screen2만 존재하기 때문에 아래와 같이 타입을 설정해요.\n\nScreen1: 과 Screen2: 의 undefined 값은 각 스크린들을 화면에 띄울 때 필요한 타입이 존재하지 않는다는 뜻이에요.\n\n이에 관해서는 이어지는 포스팅에서 더 설명해보도록 하고 지금은 넘어가도록 할게요.\n\n```ts\n// src/types/Navigation.ts\n\nexport type NaviParamList = {\n\tScreen1: undefined;\n\tScreen2: undefined;\n};\n```\n\n### 3-2. Screen1.tsx 코드 작성\n\n크게 어려운 내용은 없지만 설명을 덧붙이자면 우리가 위의 [3-1](/posts/2023/09/react-native-react-navigation-1/#3-1-navigationts-타입-코드-작성)에서 선언해놨던 NaviParamList와 현재 스크린 명을 명시해서 NavigationProp을 선언해요.\n\n그 후 useNavigation 훅을 통해 선언해놓은 NavigationProp 타입을 사용하는 navigation 변수를 생성해요.\n\nScreen-2로 이동 버튼에 onPress event를 붙여서 Screen2로 이동하는 함수를 실행시켜요.\n\n<img src={img1} style={{width: 250, margin: \"auto\", display: \"block\", marginBottom: 20}} />\n\n```tsx\n// src/screens/Screen1.tsx\n\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { NaviParamList } from '../types/Navigation';\nimport { useNavigation } from '@react-navigation/native';\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t},\n\tbutton: {\n\t\tpadding: 10,\n\t\tbackgroundColor: 'black',\n\t},\n\tbuttonLabel: {\n\t\tcolor: 'white',\n\t},\n});\n\ntype NavigationProp = StackNavigationProp<NaviParamList, 'Screen1'>;\n\nexport default function Screen1() {\n\tconst navigation = useNavigation<NavigationProp>();\n\n\treturn (\n\t\t<View style={styles.container}>\n\t\t\t<TouchableOpacity style={styles.button} onPress={() => navigation.navigate('Screen2')}>\n\t\t\t\t<Text style={styles.buttonLabel}>Screen-2로 이동</Text>\n\t\t\t</TouchableOpacity>\n\t\t</View>\n\t);\n}\n\n```\n\n### 3-2. Screen2.tsx 코드 작성\n\n위의 [Screen1](/posts/2023/09/react-native-react-navigation-1/#3-2-screen1tsx-코드-작성)과 동일해요.\n\n<img src={img2} style={{width: 250, margin: \"auto\", display: \"block\", marginBottom: 20}} />\n\n```tsx\n// src/screens/Screen2.tsx\n\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { NaviParamList } from '../types/Navigation';\nimport { useNavigation } from '@react-navigation/native';\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t},\n\tbutton: {\n\t\tpadding: 10,\n\t\tbackgroundColor: 'black',\n\t},\n\tbuttonLabel: {\n\t\tcolor: 'white',\n\t},\n});\n\ntype NavigationProp = StackNavigationProp<NaviParamList, 'Screen2'>;\n\nexport default function Screen2() {\n\tconst navigation = useNavigation<NavigationProp>();\n\n\treturn (\n\t\t<View style={styles.container}>\n\t\t\t<TouchableOpacity style={styles.button} onPress={() => navigation.navigate('Screen1')}>\n\t\t\t\t<Text style={styles.buttonLabel}>Screen-1로 이동</Text>\n\t\t\t</TouchableOpacity>\n\t\t</View>\n\t);\n}\n```\n\n### 3-4. Navigator.tsx 코드 작성\n\n이제 위에서 만든 Screen1과 Screen2를 연결할 네이게이터를 만들어야겠죠? \n\n우선 createStackNavigator를 사용해서 Stack 객체를 만들어줘요.\n\n그 이후 아래의 코드와 같이 포함시키고 싶은 스크린들을 넣어줘요.\n\n```tsx\n// src/screens/Navigator.tsx\n\nimport React from 'react';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { NaviParamList } from '../types/Navigation';\nimport Screen1 from './Screen1';\nimport Screen2 from './Screen2';\n\nconst Stack = createStackNavigator<NaviParamList>();\n\nexport default function Navigator() {\n\treturn (\n\t\t<Stack.Navigator>\n\t\t\t<Stack.Screen name=\"Screen1\" component={Screen1} />\n\t\t\t<Stack.Screen name=\"Screen2\" component={Screen2} />\n\t\t</Stack.Navigator>\n\t);\n}\n```\n\n### 3-5. App.tsx 코드 수정\n\n이제 App.tsx의 기본 코드들을 모두 지운 후에 아래 코드와 같이 NavigationContainer로 위에서 만들어준 Navigator를 감싸줘요.\n\n```tsx\n// src/screens/App.tsx\n\nimport { NavigationContainer } from '@react-navigation/native';\nimport React from 'react';\nimport Navigator from './Navigator';\n\nexport default function App() {\n\treturn (\n\t\t<NavigationContainer>\n\t\t\t<Navigator />\n\t\t</NavigationContainer>\n\t);\n}\n```\n\n### 3-6. index.js 코드 수정\n\n마지막으로 index.js의 App.tsx import 경로를 수정해주면 끝이에요!\n\n```diff\n// ...\n\n- import App from './App';\n+ import App from './src/screens/App';\n\n// ...\n```\n\n## 4. 실행\n\n이제 위에서 작성한 코드들이 잘 동작하는지 확인해요.\n\n아마 잘 작동할텐데요. \n\nreact-native 0.7 버전 이후로 새로 만든 프로젝트가 실행 중 오류가 발생하는 경우가 있어요.\n\nUnable to boot device in current state: Booted 라는 문구가 뜨면서 말이죠.\n\n이런 경우 해결은 [이 포스팅](/)을 확인해주세요.\n\n```bash\n# ios test\nyarn ios\n\n# android test\nyarn android\n```\n\n## 정리하며\n\n오늘은 react-navigation을 이용하여 화면을 전환하는 방법을 간단한 코드를 작성해서 알아봤어요.\n\n다음 포스팅에서는 react-navigation의 navigate, push, replace 등의 화면 전환 함수들을 어떤 상황에\n어떻게 사용해야 하는지에 대해 알아보도록 해요.","frontmatter":{"created_at":"23.09.04","description":"react-navigation 오픈 소스를 사용하여 react-native에서의 화면 전환에 대해 알아보자.","title":"[react-native] react-navigation으로 화면 전환 시작하기","thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#08d8f8","images":{"fallback":{"src":"/static/41ace13b6768be6622e6257e9bb0a52f/07619/react-native.png","srcSet":"/static/41ace13b6768be6622e6257e9bb0a52f/b0ac0/react-native.png 40w,\n/static/41ace13b6768be6622e6257e9bb0a52f/1d9a2/react-native.png 80w,\n/static/41ace13b6768be6622e6257e9bb0a52f/07619/react-native.png 160w,\n/static/41ace13b6768be6622e6257e9bb0a52f/4eb95/react-native.png 320w","sizes":"(min-width: 160px) 160px, 100vw"},"sources":[{"srcSet":"/static/41ace13b6768be6622e6257e9bb0a52f/7bc3b/react-native.webp 40w,\n/static/41ace13b6768be6622e6257e9bb0a52f/38898/react-native.webp 80w,\n/static/41ace13b6768be6622e6257e9bb0a52f/9b5e3/react-native.webp 160w,\n/static/41ace13b6768be6622e6257e9bb0a52f/9c0da/react-native.webp 320w","type":"image/webp","sizes":"(min-width: 160px) 160px, 100vw"}]},"width":160,"height":84}}}},"fields":{"slug":"/posts/2023/09/react-native-react-navigation-1/"}}},{"node":{"id":"b1623430-55db-5cb2-82ad-17ac459f0fb2","body":"","frontmatter":{"created_at":"23.09.04","description":"react-native에서 오픈소스 react-navigation를 사용하여 화면 전환을 해봐요.","title":"[gatsby] mdx 코드에 prism-react-renderer 적용하기","thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/d989ec3d70e4182500695075b78d3a8a/dee8c/gatsby.jpg","srcSet":"/static/d989ec3d70e4182500695075b78d3a8a/a406d/gatsby.jpg 40w,\n/static/d989ec3d70e4182500695075b78d3a8a/02462/gatsby.jpg 80w,\n/static/d989ec3d70e4182500695075b78d3a8a/dee8c/gatsby.jpg 160w,\n/static/d989ec3d70e4182500695075b78d3a8a/37d5c/gatsby.jpg 320w","sizes":"(min-width: 160px) 160px, 100vw"},"sources":[{"srcSet":"/static/d989ec3d70e4182500695075b78d3a8a/dad5c/gatsby.webp 40w,\n/static/d989ec3d70e4182500695075b78d3a8a/2e80b/gatsby.webp 80w,\n/static/d989ec3d70e4182500695075b78d3a8a/c5556/gatsby.webp 160w,\n/static/d989ec3d70e4182500695075b78d3a8a/06b74/gatsby.webp 320w","type":"image/webp","sizes":"(min-width: 160px) 160px, 100vw"}]},"width":160,"height":67}}}},"fields":{"slug":"/posts/2023/09/gatsby-prismjs-react-renderer/"}}},{"node":{"id":"63cb3019-553e-5030-ac9d-af82a5005520","body":"\n\n<a download=\"test.xlsx\" href=\"/files/test.xlsx\">다운로드</a>\n\n<a download=\"hello.txt\" href=\"/files/hello.txt\">다운로드</a>","frontmatter":{"created_at":"23.09.04","description":"react-native에서 오픈소스 react-navigation를 사용하여 화면 전환을 해봐요.","title":"[mac] iTerm2 설치","thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/d989ec3d70e4182500695075b78d3a8a/dee8c/gatsby.jpg","srcSet":"/static/d989ec3d70e4182500695075b78d3a8a/a406d/gatsby.jpg 40w,\n/static/d989ec3d70e4182500695075b78d3a8a/02462/gatsby.jpg 80w,\n/static/d989ec3d70e4182500695075b78d3a8a/dee8c/gatsby.jpg 160w,\n/static/d989ec3d70e4182500695075b78d3a8a/37d5c/gatsby.jpg 320w","sizes":"(min-width: 160px) 160px, 100vw"},"sources":[{"srcSet":"/static/d989ec3d70e4182500695075b78d3a8a/dad5c/gatsby.webp 40w,\n/static/d989ec3d70e4182500695075b78d3a8a/2e80b/gatsby.webp 80w,\n/static/d989ec3d70e4182500695075b78d3a8a/c5556/gatsby.webp 160w,\n/static/d989ec3d70e4182500695075b78d3a8a/06b74/gatsby.webp 320w","type":"image/webp","sizes":"(min-width: 160px) 160px, 100vw"}]},"width":160,"height":67}}}},"fields":{"slug":"/posts/2023/09/install-iterm/"}}},{"node":{"id":"26696733-2276-533a-83aa-9a4b460fa404","body":"\n","frontmatter":{"created_at":"23.09.02","description":"mac m1에서 react-native 설치를 위한 환경 설정 및 설치 방법에 대해 알아봐요.","title":"[react-native] mac m1 환경 설정 및 설치 방법","thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#08d8f8","images":{"fallback":{"src":"/static/41ace13b6768be6622e6257e9bb0a52f/07619/react-native.png","srcSet":"/static/41ace13b6768be6622e6257e9bb0a52f/b0ac0/react-native.png 40w,\n/static/41ace13b6768be6622e6257e9bb0a52f/1d9a2/react-native.png 80w,\n/static/41ace13b6768be6622e6257e9bb0a52f/07619/react-native.png 160w,\n/static/41ace13b6768be6622e6257e9bb0a52f/4eb95/react-native.png 320w","sizes":"(min-width: 160px) 160px, 100vw"},"sources":[{"srcSet":"/static/41ace13b6768be6622e6257e9bb0a52f/7bc3b/react-native.webp 40w,\n/static/41ace13b6768be6622e6257e9bb0a52f/38898/react-native.webp 80w,\n/static/41ace13b6768be6622e6257e9bb0a52f/9b5e3/react-native.webp 160w,\n/static/41ace13b6768be6622e6257e9bb0a52f/9c0da/react-native.webp 320w","type":"image/webp","sizes":"(min-width: 160px) 160px, 100vw"}]},"width":160,"height":84}}}},"fields":{"slug":"/posts/2023/09/react-native-setting-1/"}}},{"node":{"id":"5306768d-f878-5974-887b-d0aec0eee0e3","body":"\n인텔 맥과 다르게 m1 이상의 맥은 homebrew 설치 과정이 조금 추가되는데요.\n\n오늘은 m1 맥에서 homebrew를 설치하는 방법에 대해 알아보도록 해요.\n\n## 1. homebrew 설치\n\n터미널을 열어서 아래의 명령어를 실행시켜요.\n\n```bash\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n## 2. homebrew 설치 확인\n\n```bash\nbrew --version\n# zsh: command not found: brew\n```\n\n설치가 완료되고 확인을 위해 brew --version 명령어를 입력하면 아래와 같이 zsh: command not found: brew 라는 문구가 떠요.\n\n이 문구가 뜨는 이유는 간단해요. homebrew의 실행 파일의 위치를 path에 설정해두지 않아서 그런 거에요.\n\n## 3. homebrew path 설정\n\n잠시 터미널의 스크롤을 올려서 homebrew가 설치된 직후의 response 코드들 볼게요.\n보면 아래와 같이 Next steps에 대해 친절하게 알려주는데 이게 homebrew의 path를 설정하는 방법이에요.\n\n```bash\n==> Next steps:\n- Run these three commands in your terminal to add Homebrew to your PATH:\n    echo '# Set PATH, MANPATH, etc., for Homebrew.' >> /Users/{your user name}/.zprofile\n    echo 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' >> /Users/{your user name}/.zprofile\n    eval \"$(/opt/homebrew/bin/brew shellenv)\"\n- Run brew help to get started\n- Further documentation:\n    https://docs.brew.sh\n```\n\n똑같이 따라해볼까요?\n\n아래의 코드들을 복사해서 터미널에 붙여넣으시면 되는데 {\"{your user name}\"} 부분에 여러분의 맥에 등록되어있는 폴더명을 입력하시면 되요.\n\n```bash\necho '# Set PATH, MANPATH, etc., for Homebrew.' >> /Users/{your user name}/.zprofile\necho 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' >> /Users/{your user name}/.zprofile\neval \"$(/opt/homebrew/bin/brew shellenv)\"\n```\n\n## 4. homebrew 설치 완료\n\n이후 다시 brew --version 명령어를 입력하면 아래와 같이 설치하신 homebrew의 버전을 보실 수 있어요.\n\n이제 brew를 마음껏 사용하세요!\n\n```bash\nbrew --version\n# Homebrew 4.1.11\n```","frontmatter":{"created_at":"23.09.01","description":"인텔 맥과 다르게 m1 이상의 맥은 homebrew 설치 과정이 조금 추가되는데요. 오늘은 m1 맥에서 homebrew를 설치하는 방법에 대해 알아보도록 해요.","title":"[macOS] m1 homebrew 설치하기","thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#282828","images":{"fallback":{"src":"/static/8ab5c26b4c3bfbbd17abbb6361d40179/8c314/homebrew.png","srcSet":"/static/8ab5c26b4c3bfbbd17abbb6361d40179/89d03/homebrew.png 40w,\n/static/8ab5c26b4c3bfbbd17abbb6361d40179/35c3d/homebrew.png 80w,\n/static/8ab5c26b4c3bfbbd17abbb6361d40179/8c314/homebrew.png 160w,\n/static/8ab5c26b4c3bfbbd17abbb6361d40179/676d8/homebrew.png 320w","sizes":"(min-width: 160px) 160px, 100vw"},"sources":[{"srcSet":"/static/8ab5c26b4c3bfbbd17abbb6361d40179/455ff/homebrew.webp 40w,\n/static/8ab5c26b4c3bfbbd17abbb6361d40179/a1ac7/homebrew.webp 80w,\n/static/8ab5c26b4c3bfbbd17abbb6361d40179/4089f/homebrew.webp 160w,\n/static/8ab5c26b4c3bfbbd17abbb6361d40179/ce75c/homebrew.webp 320w","type":"image/webp","sizes":"(min-width: 160px) 160px, 100vw"}]},"width":160,"height":82}}}},"fields":{"slug":"/posts/2023/09/install-homebrew/"}}}]}}}